/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Weatherstation } from "./Weatherstation";
import { WeatherstationCountArgs } from "./WeatherstationCountArgs";
import { WeatherstationFindManyArgs } from "./WeatherstationFindManyArgs";
import { WeatherstationFindUniqueArgs } from "./WeatherstationFindUniqueArgs";
import { CreateWeatherstationArgs } from "./CreateWeatherstationArgs";
import { UpdateWeatherstationArgs } from "./UpdateWeatherstationArgs";
import { DeleteWeatherstationArgs } from "./DeleteWeatherstationArgs";
import { AlertFindManyArgs } from "../../alert/base/AlertFindManyArgs";
import { Alert } from "../../alert/base/Alert";
import { WeatherstationService } from "../weatherstation.service";
@graphql.Resolver(() => Weatherstation)
export class WeatherstationResolverBase {
  constructor(protected readonly service: WeatherstationService) {}

  async _weatherstationsMeta(
    @graphql.Args() args: WeatherstationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Weatherstation])
  async weatherstations(
    @graphql.Args() args: WeatherstationFindManyArgs
  ): Promise<Weatherstation[]> {
    return this.service.weatherstations(args);
  }

  @graphql.Query(() => Weatherstation, { nullable: true })
  async weatherstation(
    @graphql.Args() args: WeatherstationFindUniqueArgs
  ): Promise<Weatherstation | null> {
    const result = await this.service.weatherstation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Weatherstation)
  async createWeatherstation(
    @graphql.Args() args: CreateWeatherstationArgs
  ): Promise<Weatherstation> {
    return await this.service.createWeatherstation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Weatherstation)
  async updateWeatherstation(
    @graphql.Args() args: UpdateWeatherstationArgs
  ): Promise<Weatherstation | null> {
    try {
      return await this.service.updateWeatherstation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Weatherstation)
  async deleteWeatherstation(
    @graphql.Args() args: DeleteWeatherstationArgs
  ): Promise<Weatherstation | null> {
    try {
      return await this.service.deleteWeatherstation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Alert], { name: "alerts" })
  async findAlerts(
    @graphql.Parent() parent: Weatherstation,
    @graphql.Args() args: AlertFindManyArgs
  ): Promise<Alert[]> {
    const results = await this.service.findAlerts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
