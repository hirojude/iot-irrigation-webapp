/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WeatherstationService } from "../weatherstation.service";
import { WeatherstationCreateInput } from "./WeatherstationCreateInput";
import { Weatherstation } from "./Weatherstation";
import { WeatherstationFindManyArgs } from "./WeatherstationFindManyArgs";
import { WeatherstationWhereUniqueInput } from "./WeatherstationWhereUniqueInput";
import { WeatherstationUpdateInput } from "./WeatherstationUpdateInput";
import { AlertFindManyArgs } from "../../alert/base/AlertFindManyArgs";
import { Alert } from "../../alert/base/Alert";
import { AlertWhereUniqueInput } from "../../alert/base/AlertWhereUniqueInput";

export class WeatherstationControllerBase {
  constructor(protected readonly service: WeatherstationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Weatherstation })
  async createWeatherstation(
    @common.Body() data: WeatherstationCreateInput
  ): Promise<Weatherstation> {
    return await this.service.createWeatherstation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Weatherstation] })
  @ApiNestedQuery(WeatherstationFindManyArgs)
  async weatherstations(
    @common.Req() request: Request
  ): Promise<Weatherstation[]> {
    const args = plainToClass(WeatherstationFindManyArgs, request.query);
    return this.service.weatherstations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Weatherstation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async weatherstation(
    @common.Param() params: WeatherstationWhereUniqueInput
  ): Promise<Weatherstation | null> {
    const result = await this.service.weatherstation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Weatherstation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWeatherstation(
    @common.Param() params: WeatherstationWhereUniqueInput,
    @common.Body() data: WeatherstationUpdateInput
  ): Promise<Weatherstation | null> {
    try {
      return await this.service.updateWeatherstation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Weatherstation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWeatherstation(
    @common.Param() params: WeatherstationWhereUniqueInput
  ): Promise<Weatherstation | null> {
    try {
      return await this.service.deleteWeatherstation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/alerts")
  @ApiNestedQuery(AlertFindManyArgs)
  async findAlerts(
    @common.Req() request: Request,
    @common.Param() params: WeatherstationWhereUniqueInput
  ): Promise<Alert[]> {
    const query = plainToClass(AlertFindManyArgs, request.query);
    const results = await this.service.findAlerts(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        level: true,
        message: true,
        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        weatherstation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/alerts")
  async connectAlerts(
    @common.Param() params: WeatherstationWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        connect: body,
      },
    };
    await this.service.updateWeatherstation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/alerts")
  async updateAlerts(
    @common.Param() params: WeatherstationWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        set: body,
      },
    };
    await this.service.updateWeatherstation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/alerts")
  async disconnectAlerts(
    @common.Param() params: WeatherstationWhereUniqueInput,
    @common.Body() body: AlertWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      alerts: {
        disconnect: body,
      },
    };
    await this.service.updateWeatherstation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
