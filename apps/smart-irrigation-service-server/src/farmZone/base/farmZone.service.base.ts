/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FarmZone as PrismaFarmZone } from "@prisma/client";

export class FarmZoneServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FarmZoneCountArgs, "select">): Promise<number> {
    return this.prisma.farmZone.count(args);
  }

  async farmZones<T extends Prisma.FarmZoneFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmZoneFindManyArgs>
  ): Promise<PrismaFarmZone[]> {
    return this.prisma.farmZone.findMany<Prisma.FarmZoneFindManyArgs>(args);
  }
  async farmZone<T extends Prisma.FarmZoneFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmZoneFindUniqueArgs>
  ): Promise<PrismaFarmZone | null> {
    return this.prisma.farmZone.findUnique(args);
  }
  async createFarmZone<T extends Prisma.FarmZoneCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmZoneCreateArgs>
  ): Promise<PrismaFarmZone> {
    return this.prisma.farmZone.create<T>(args);
  }
  async updateFarmZone<T extends Prisma.FarmZoneUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmZoneUpdateArgs>
  ): Promise<PrismaFarmZone> {
    return this.prisma.farmZone.update<T>(args);
  }
  async deleteFarmZone<T extends Prisma.FarmZoneDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmZoneDeleteArgs>
  ): Promise<PrismaFarmZone> {
    return this.prisma.farmZone.delete(args);
  }
}
