/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FarmZoneService } from "../farmZone.service";
import { FarmZoneCreateInput } from "./FarmZoneCreateInput";
import { FarmZone } from "./FarmZone";
import { FarmZoneFindManyArgs } from "./FarmZoneFindManyArgs";
import { FarmZoneWhereUniqueInput } from "./FarmZoneWhereUniqueInput";
import { FarmZoneUpdateInput } from "./FarmZoneUpdateInput";

export class FarmZoneControllerBase {
  constructor(protected readonly service: FarmZoneService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FarmZone })
  async createFarmZone(
    @common.Body() data: FarmZoneCreateInput
  ): Promise<FarmZone> {
    return await this.service.createFarmZone({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FarmZone] })
  @ApiNestedQuery(FarmZoneFindManyArgs)
  async farmZones(@common.Req() request: Request): Promise<FarmZone[]> {
    const args = plainToClass(FarmZoneFindManyArgs, request.query);
    return this.service.farmZones({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FarmZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async farmZone(
    @common.Param() params: FarmZoneWhereUniqueInput
  ): Promise<FarmZone | null> {
    const result = await this.service.farmZone({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FarmZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFarmZone(
    @common.Param() params: FarmZoneWhereUniqueInput,
    @common.Body() data: FarmZoneUpdateInput
  ): Promise<FarmZone | null> {
    try {
      return await this.service.updateFarmZone({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FarmZone })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFarmZone(
    @common.Param() params: FarmZoneWhereUniqueInput
  ): Promise<FarmZone | null> {
    try {
      return await this.service.deleteFarmZone({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
