/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { IrrigationSchedule } from "./IrrigationSchedule";
import { IrrigationScheduleCountArgs } from "./IrrigationScheduleCountArgs";
import { IrrigationScheduleFindManyArgs } from "./IrrigationScheduleFindManyArgs";
import { IrrigationScheduleFindUniqueArgs } from "./IrrigationScheduleFindUniqueArgs";
import { DeleteIrrigationScheduleArgs } from "./DeleteIrrigationScheduleArgs";
import { IrrigationScheduleService } from "../irrigationSchedule.service";
@graphql.Resolver(() => IrrigationSchedule)
export class IrrigationScheduleResolverBase {
  constructor(protected readonly service: IrrigationScheduleService) {}

  async _irrigationSchedulesMeta(
    @graphql.Args() args: IrrigationScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [IrrigationSchedule])
  async irrigationSchedules(
    @graphql.Args() args: IrrigationScheduleFindManyArgs
  ): Promise<IrrigationSchedule[]> {
    return this.service.irrigationSchedules(args);
  }

  @graphql.Query(() => IrrigationSchedule, { nullable: true })
  async irrigationSchedule(
    @graphql.Args() args: IrrigationScheduleFindUniqueArgs
  ): Promise<IrrigationSchedule | null> {
    const result = await this.service.irrigationSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => IrrigationSchedule)
  async deleteIrrigationSchedule(
    @graphql.Args() args: DeleteIrrigationScheduleArgs
  ): Promise<IrrigationSchedule | null> {
    try {
      return await this.service.deleteIrrigationSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
