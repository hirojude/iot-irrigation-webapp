/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IrrigationScheduleService } from "../irrigationSchedule.service";
import { IrrigationScheduleCreateInput } from "./IrrigationScheduleCreateInput";
import { IrrigationSchedule } from "./IrrigationSchedule";
import { IrrigationScheduleFindManyArgs } from "./IrrigationScheduleFindManyArgs";
import { IrrigationScheduleWhereUniqueInput } from "./IrrigationScheduleWhereUniqueInput";
import { IrrigationScheduleUpdateInput } from "./IrrigationScheduleUpdateInput";

export class IrrigationScheduleControllerBase {
  constructor(protected readonly service: IrrigationScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: IrrigationSchedule })
  async createIrrigationSchedule(
    @common.Body() data: IrrigationScheduleCreateInput
  ): Promise<IrrigationSchedule> {
    return await this.service.createIrrigationSchedule({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [IrrigationSchedule] })
  @ApiNestedQuery(IrrigationScheduleFindManyArgs)
  async irrigationSchedules(
    @common.Req() request: Request
  ): Promise<IrrigationSchedule[]> {
    const args = plainToClass(IrrigationScheduleFindManyArgs, request.query);
    return this.service.irrigationSchedules({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: IrrigationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async irrigationSchedule(
    @common.Param() params: IrrigationScheduleWhereUniqueInput
  ): Promise<IrrigationSchedule | null> {
    const result = await this.service.irrigationSchedule({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: IrrigationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIrrigationSchedule(
    @common.Param() params: IrrigationScheduleWhereUniqueInput,
    @common.Body() data: IrrigationScheduleUpdateInput
  ): Promise<IrrigationSchedule | null> {
    try {
      return await this.service.updateIrrigationSchedule({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: IrrigationSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIrrigationSchedule(
    @common.Param() params: IrrigationScheduleWhereUniqueInput
  ): Promise<IrrigationSchedule | null> {
    try {
      return await this.service.deleteIrrigationSchedule({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
