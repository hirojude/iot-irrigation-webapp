/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Sensor as PrismaSensor } from "@prisma/client";

export class SensorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SensorCountArgs, "select">): Promise<number> {
    return this.prisma.sensor.count(args);
  }

  async sensors<T extends Prisma.SensorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorFindManyArgs>
  ): Promise<PrismaSensor[]> {
    return this.prisma.sensor.findMany<Prisma.SensorFindManyArgs>(args);
  }
  async sensor<T extends Prisma.SensorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorFindUniqueArgs>
  ): Promise<PrismaSensor | null> {
    return this.prisma.sensor.findUnique(args);
  }
  async createSensor<T extends Prisma.SensorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorCreateArgs>
  ): Promise<PrismaSensor> {
    return this.prisma.sensor.create<T>(args);
  }
  async updateSensor<T extends Prisma.SensorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorUpdateArgs>
  ): Promise<PrismaSensor> {
    return this.prisma.sensor.update<T>(args);
  }
  async deleteSensor<T extends Prisma.SensorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorDeleteArgs>
  ): Promise<PrismaSensor> {
    return this.prisma.sensor.delete(args);
  }
}
