/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SensorService } from "../sensor.service";
import { SensorCreateInput } from "./SensorCreateInput";
import { Sensor } from "./Sensor";
import { SensorFindManyArgs } from "./SensorFindManyArgs";
import { SensorWhereUniqueInput } from "./SensorWhereUniqueInput";
import { SensorUpdateInput } from "./SensorUpdateInput";

export class SensorControllerBase {
  constructor(protected readonly service: SensorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sensor })
  async createSensor(@common.Body() data: SensorCreateInput): Promise<Sensor> {
    return await this.service.createSensor({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sensor] })
  @ApiNestedQuery(SensorFindManyArgs)
  async sensors(@common.Req() request: Request): Promise<Sensor[]> {
    const args = plainToClass(SensorFindManyArgs, request.query);
    return this.service.sensors({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    const result = await this.service.sensor({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSensor(
    @common.Param() params: SensorWhereUniqueInput,
    @common.Body() data: SensorUpdateInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.updateSensor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sensor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSensor(
    @common.Param() params: SensorWhereUniqueInput
  ): Promise<Sensor | null> {
    try {
      return await this.service.deleteSensor({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
